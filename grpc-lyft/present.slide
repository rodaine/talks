gRPC at Lyft
gRPC Meetup - SF

Chris Roche
Lyft, Software Engineer - Core Libraries
croche@lyft.com

http://rodaine.com
http://github.com/rodaine
@rodaine

* Howdy!

- Core Libraries @ Lyft
- Previously Core Platform & DevOps @ VSCO

* Background

* Infrastructure @ Lyft

- PHP Monolith (ongoing decomposition)
- Go "Tier-Zero" core services
- Python (Micro)services
- Envoy network fabric

* What problems are we trying to solve?

- XX% of errors in our Python services are type related
- Documenting APIs are hard to maintain
- No single source of truth for the shape of our data

* Solution: gRPC and Protocol Buffers!

- Standardize the API definitions and I/O
- Enforce types at the service boundaries
- IDLs become our single source of truth

Standardize the API definitions and I/O


- Enforce types at the service boundary


* Tier-Zero Core Services

- Primary apps of the business
- gRPC interface
- proto3-based ODM for MongoDB & DynamoDB

* Python Services

- Fronted by Gunicorn + Gevent
- Flask-based HTTP servers

* Envoy

- L7 edge & service proxy
- Modern C++11 codebase
- HTTP/2 & *gRPC*fluent*
- Extensible (L3/4/7) filter architecture
- Service discovery, load balancing, health checks
- Mesh routing, protocol agnostic, robust stats
- Oh, ...and *Open*Source!*

*Goal:*

_The_network_should_be_transparent_to_applications._When_network_and_application_problems_do_occur_it_should_be_easy_to_determine_the_source_of_the_problem._

* Topology

.image topology.png 575 _

* So what about gRPC?


* Gevent + gRPC =



* Links

- Envoy: [[https://lyft.github.io/envoy]]
- This Talk: [[http://talks.rodaine.com/grpc-lyft]]
